@page "/chat"
@page "/chat/{ReciverIdForm}"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IUserService _UserService
@inject IMessageService _MessageService
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims;
@using System.Text;
@using messager.Services.Interfaces;
@using messager.Services;
@using messager.models;
@implements IAsyncDisposable
<PageTitle>Index</PageTitle>
<style>
    #creatorMessages{
        background-color: rgb(255,85,51);
        padding:10px;
        margin: 10px;
        text-align:right;
    }

    #reciverMessages{
        background-color: rgb(51,187,255);
        padding: 10px;
        margin:10px;
        text-align: left;

    }

    #messageConatiner {
        width: 100%; 
        height: 700px; 
        overflow: auto; 
        border: 1px solid #ccc; 
    }
</style>
<html>
<body>
<p>@ReciverIdForm</p>


       
<div id="messageConatiner">
         
        @if (MessageList != null)
        {
            @foreach (var message in MessageList)
            {

                @if (message.Creatorid == userId)
                {
                    AddMessageToView(AddBreakLines(message.Content), "creatorMessages");//napraw wyswietlanie
                    
                }
                else
                {
                    AddMessageToView(AddBreakLines(message.Content), "reciverMessages");
                }
                MessageListToRemove.Add(message);
            }

        }
        @if (MessageListToRemove != null)
        {
            @foreach (var message in MessageListToRemove)
            {
                MessageList.Remove(message);
            }
        }
    </div>
    <input type="text" name="Message" @bind="Message" />
    <button @onclick="() => SendMessage(Message,ReciverIdForm)">napisz</button>
</body>

</html>

@code {
    public string Message { get; set; } = "";
    public string _RenderMessage { get; set; } = "";
    private readonly UserManager<UserModel> _userManager;
    [Parameter] public string ReciverIdForm { get; set; }
    private HubConnection? _hubConnection;
    private string userId;
    private List<Message> MessageList;
    private List<Message> MessageListToRemove = new List<Message>();

    protected override async Task OnInitializedAsync()
    {
        userId = await GetLoggedUser();
        MessageList = await _MessageService.GetMessages(userId, ReciverIdForm);

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/testhub"))
            .Build();

        UserModel _User = await _UserService.GetLoggedUser();
        _hubConnection.On<string>("ReciveNotification", (message) =>
        {

            AddMessageToView(message, "reciverMessages");
            JSRuntime.InvokeVoidAsync("scrollToBottom");

        });

        await _hubConnection.StartAsync();
        await _hubConnection.InvokeAsync("JoinGroup", _User.Id);
        JSRuntime.InvokeVoidAsync("scrollToBottom");
    }

    private async Task AddMessageToView(string MessageContent,string ElementId)
    {
        await JSRuntime.InvokeVoidAsync("AddMessageToView", MessageContent, ElementId);
    }
    private async Task SendMessage(string MessageContent, string ReciverId)
    {
        var userId = await GetLoggedUser();
        _MessageService.AddMessage(MessageContent, ReciverId, userId);
        Message = "";
        await _hubConnection.InvokeAsync("SendMessage", MessageContent, ReciverIdForm);
        AddMessageToView(MessageContent, "creatorMessages");
        await JSRuntime.InvokeVoidAsync("scrollToBottom");


    }
    public string AddBreakLines(string Message)
    {
        var MessageWithBreakLines = "";
        StringBuilder outputText = new StringBuilder();
        int licznik = 0;

        foreach (char c in Message)
        {
            if (licznik >= 3)
            {
                outputText.Append("</br>");
                licznik = 0;
            }
            outputText.Append(c);
            licznik++;
        }
        MessageWithBreakLines = outputText.ToString();
        return MessageWithBreakLines;
    }
    public async Task<string> GetLoggedUser()
    {
        UserModel _User = await _UserService.GetLoggedUser();
        return _User.Id;
    }
    public async ValueTask DisposeAsync()
    {
        if(_hubConnection != null)
        {
        await _hubConnection.DisposeAsync();
        }
    }
}
