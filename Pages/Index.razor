@page "/chat"
@page "/chat/{ReciverIdForm}"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IUserService _UserService
@inject IMessageService _MessageService
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims;
@using messager.Services.Interfaces;
@using messager.Services;
@using messager.models;
@implements IAsyncDisposable
<PageTitle>Index</PageTitle>
<html>
<body>
    <p>@ReciverIdForm</p>
@if (_hubConnection == null)
{
 
    <button onclick="@Connect">Polacz</button>
}
else
{
   
    <input type="text" name="Message" @bind="Message" />
        <button @onclick="() => ToAll(Message,ReciverIdForm)">napisz</button>
}

       
<div id="NWNM"class="messageConatiner">
        @code
        {
            private string userId;
            private List<Message> MessageList;
            protected override async Task OnInitializedAsync()
            {
                userId = await GetLoggedUser();
                MessageList = await _MessageService.GetMessages(userId, ReciverIdForm);
            }
        }
        @if (MessageList != null)
        {
            @foreach (var message in MessageList)
            {
                @if (message.Creatorid == userId)
                {
                    <div class="creatorMessages">
                        <p>@message.Content</p>
                    </div>
                }
                @if (message.Creatorid == ReciverIdForm)
                {
                    <div class="reciverMessages">
                        <p>@message.Content</p>
                    </div>
                }
            }

        }
    </div>
</body>

</html>


@code {
    public string Message { get; set; } = "";
    public string _RenderMessage { get; set; } = "";
    private readonly UserManager<UserModel> _userManager;
    [Parameter] public string ReciverIdForm { get; set; }
    private HubConnection? _hubConnection;

    private async Task Connect()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/testhub"))
            .Build();

        UserModel _User = await _UserService.GetLoggedUser();
        _hubConnection.On<string>("ReciveNotification", (message) =>
        {

            AddMessageToView(message);
            Console.WriteLine("PRZYHJELO PETLE");
        });

        await _hubConnection.StartAsync();
    }
    private async Task AddMessageToView(string MessageContent)
    {
        await JSRuntime.InvokeVoidAsync("AddMessageToView", MessageContent);
    }
    private async Task ToAll(string MessageContent, string ReciverId)
    {
        var userId = await GetLoggedUser();
        _MessageService.AddMessage(MessageContent, ReciverId, userId);
        
        Message = "";
        await _hubConnection.InvokeAsync("ToAll", MessageContent);

    }
   
    
    public async Task<string> GetLoggedUser()
    {
        UserModel _User = await _UserService.GetLoggedUser();
        return _User.Id;
    }
    public async ValueTask DisposeAsync()
    {
        if(_hubConnection != null){
        await _hubConnection.DisposeAsync();
        }
    }
}
