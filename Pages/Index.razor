@page "/chat"
@inject NavigationManager Navigation
@inject HttpClient Http
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims;
@using messager.Services.Interfaces;
@using messager.Services;
@using messager.models;
@implements IAsyncDisposable
<PageTitle>Index</PageTitle>
<html>
<body>
@if (_hubConnection == null)
{
 
    <button onclick="@Connect">Polacz</button>
}
else
{
   
    <input type="text" name="Message" @bind="Message" />
    <button onclick="@ToAll">powiadom</button>
}
<ul>
   
</ul>
</body>

</html>


@code {
    public string Message { get; set; } = "";
    public string _RenderMessage { get; set; } = "";
    private readonly UserManager<UserModel> _userManager;
    private readonly IUserService _userService;
   

    private HubConnection? _hubConnection;
    private async Task Connect()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/testhub"))
            .Build();
        
       
        _hubConnection.On<string>("ReceiveNotification", (message) =>
        {
           
            Console.WriteLine(message);
           
        });
        UserModel _User = await _userService.GetLoggedUser();
        await _hubConnection.StartAsync();
    }
    public void RenderMessage(string message)
    {
        _RenderMessage = message;
        Console.WriteLine("dziala");
        StateHasChanged();
    }
    private async Task ToAll()
    {
        await _hubConnection.InvokeAsync("ToAll", Message);
       
    }

    public async ValueTask DisposeAsync()
    {
        if(_hubConnection != null){
    await _hubConnection.DisposeAsync();
        }
    }
}
