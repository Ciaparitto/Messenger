@page "/chat/{ReciverIdForm}"
@implements IAsyncDisposable

@inject NavigationManager Navigation
@inject AppDbContext _Context
@inject IJSRuntime JSRuntime
@inject IUserService _UserService
@inject IMessageService _MessageService

@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims;
@using System.Text;
@using System.Security.Policy
@using messager.Services.Interfaces;
@using messager.Services;
@using messager.models;



<PageTitle>Chat</PageTitle>

<link href="css/style.css" rel="stylesheet">

@if (Receiver != null && User != null)
{
	<div id="ReciverInfo">
		<div id="Home-button-container">
			<button class="ButtonLayOut" @onclick="@(() => RedirectToPage("/"))">Main Page</button>
		</div>
		<div id="ImgAndUsername">
			<img id="UserPhoto" src="@($"/DisplayImage/{Receiver.ProfileImageId}")" />
			<h3 id="username-Chat">@Receiver.UserName</h3>
		</div>
	</div>
}


<div id="messageConatiner">
</div>
<div id="sendbutton-container">
	<input id="inputChat" type="text" name="Message" @bind="MessageContent" />
	<button id="sendbutton" @onclick="() => SendMessage(MessageContent,Receiver.Id)">Write</button>
</div>


@code {
	private string MessageContent { get; set; } = "";
	[Parameter] public string ReciverIdForm { get; set; }
	private HubConnection? _HubConnection;
	private UserModel User;
	private UserModel Receiver;
	private List<MessageModel> MessageList;

	protected override async Task OnInitializedAsync()
	{
		Receiver = await _UserService.GetUserById(ReciverIdForm);
		User = await _UserService.GetLoggedUser();
		MessageList = await _MessageService.GetMessages(User.Id, Receiver.Id);
		await ReadMessages();
		await GenerateMessages();
		_HubConnection = new HubConnectionBuilder()

					.WithUrl(Navigation.ToAbsoluteUri("/testhub"), options =>
					{
						options.Headers["UserId"] = User.Id;
					})
					.Build();
		await _HubConnection.StartAsync();

		_HubConnection.On<string, string>("ReciveNotification", async (Message, MessageId) =>
					{
						AddMessageToView(AddBreakLines(Message), "reciverMessages", Receiver.ProfileImageId.ToString(), "reciverImg", MessageId);

						JSRuntime.InvokeVoidAsync("scrollToBottom");
						await _HubConnection.InvokeAsync("ReadMessages", Receiver.Id);

					});

		_HubConnection.On("ReadMessages", async () =>
			{

				MessageList = await _MessageService.GetMessages(User.Id, Receiver.Id);
				var UnReadMessages = MessageList.Where(x => x.ReciverId == Receiver.Id && x.IsRead == false).ToList();
				foreach (var Message in UnReadMessages)
				{
					await JSRuntime.InvokeVoidAsync("ChangePhoto", Message.Id, "14");
					var CurrenMessage = await _Context.MessageList.FindAsync(Message.Id);
					CurrenMessage.IsRead = true;
					await _Context.SaveChangesAsync();
				}
			});

		await _HubConnection.InvokeAsync("JoinGroup", User.Id);
		await _HubConnection.InvokeAsync("ReadMessages", Receiver.Id);
		await JSRuntime.InvokeVoidAsync("scrollToBottom");
	}
	private async Task ReadMessages()
	{

		var UnReadMessages = MessageList.Where(x => x.ReciverId == Receiver.Id && x.IsRead == false).ToList();
		foreach (var message in UnReadMessages)
		{
			if (!message.IsRead)
			{
				message.IsRead = true;
				var Message = await _Context.MessageList.FindAsync(message.Id);
				Message.IsRead = true;
				await _Context.SaveChangesAsync();

			}
		}

	}
	private async Task GenerateMessages()
	{
		MessageList = await _MessageService.GetMessages(User.Id, Receiver.Id);
		if (MessageList != null)
		{
			foreach (var Message in MessageList)
			{

				if (Message.CreatorId == User.Id)
				{
					if (Message.IsRead)
					{
						AddMessageToView(AddBreakLines(Message.Content), "creatorMessages", "14", "creatorImg", Message.Id.ToString()); // image with id 6 have readed message icon
					}
					else
					{
						AddMessageToView(AddBreakLines(Message.Content), "creatorMessages", "13", "creatorImg", Message.Id.ToString()); // image with id 13h ave sended message icon
					}


				}
				else
				{

					AddMessageToView(AddBreakLines(Message.Content), "reciverMessages", Receiver.ProfileImageId.ToString(), "reciverImg", Message.Id.ToString());
				}

			}

		}

	}
	public async ValueTask DisposeAsync()
	{

		if (_HubConnection != null)
		{
			await _HubConnection.StopAsync();
			_HubConnection.DisposeAsync();
		}
	}
	private async Task AddMessageToView(string MessageContent, string MessageClassName, string ProfileId, string ImgClassName, string MessageId)
	{

		await JSRuntime.InvokeVoidAsync("AddMessageToView", MessageContent, MessageClassName, ProfileId, ImgClassName, MessageId);
	}
	private async Task SendMessage(string MessageContent, string ReciverId)
	{

		if (!string.IsNullOrWhiteSpace(MessageContent) && MessageContent.Length < 512)
		{

			var MessageId = await _MessageService.AddMessage(MessageContent, ReciverId, User.Id);

			this.MessageContent = "";
			await _HubConnection.InvokeAsync("SendMessage", MessageContent, Receiver.Id, MessageId);


			AddMessageToView(AddBreakLines(MessageContent), "creatorMessages", "13", "creatorImg", MessageId);
			await JSRuntime.InvokeVoidAsync("scrollToBottom");


			await _HubConnection.InvokeAsync("ReadMessages", Receiver.Id);
			await _HubConnection.InvokeAsync("ChangeMessageNotification", Receiver.Id);



		}


	}

	private string AddBreakLines(string Message)
	{
		var MessageWithBreakLines = "";
		StringBuilder OutPutText = new StringBuilder();
		int Counter = 0;

		foreach (char c in Message)
		{
			if (Counter >= 85)
			{
				OutPutText.Append("</br>");
				Counter = 0;
			}
			OutPutText.Append(c);
			Counter++;
		}
		MessageWithBreakLines = OutPutText.ToString();
		return MessageWithBreakLines;
	}


	private void RedirectToPage(string Url)
	{
		Navigation.NavigateTo(Url, forceLoad: true);
	}

}
