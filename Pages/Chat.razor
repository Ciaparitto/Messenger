@page "/chat/{ReciverIdForm}"
@layout EmptyLayout
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AppDbContext _Context;
@inject IJSRuntime JSRuntime
@inject IUserService _UserService
@inject IMessageService _MessageService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims;
@using System.Text;
@using System.Security.Policy
@using messager.Services.Interfaces;
@using messager.Services;
@using messager.models;
@implements IAsyncDisposable
<PageTitle>Index</PageTitle>
<link href="css/style.css" rel="stylesheet">


<html>
<body>
    <div id="Home-button-container">
        <button class="ButtonLayOut" @onclick="@(() => RedirectToPage("/"))">Strona Glowna</button>
   </div>
   
    @if (Revicer != null && user != null)
    {
        <img id="UserPhoto" src="@($"/DisplayImage/{user.ProfileImageId}")" />

        <h3 id="username">@Revicer.UserName</h3>
    }

       
<div id="messageConatiner">
         
        @if (MessageList != null)
        {
            @foreach (var message in MessageList)
            {

                @if (message.CreatorId == user.Id)
                {
                    AddMessageToView(AddBreakLines(message.Content), "creatorMessages");
                    
                }
                else
                {
                    AddMessageToView(AddBreakLines(message.Content), "reciverMessages");
                }
                MessageListToRemove.Add(message);
            }

        }
        @if (MessageListToRemove != null)
        {
            @foreach (var message in MessageListToRemove)
            {
                MessageList.Remove(message);
            }
        }
    </div>
    <input id="inputChat"type="text" name="Message" @bind="Message" />
    <button id="sendbutton" @onclick="() => SendMessage(Message,Revicer.Id)">napisz</button>
</body>

</html>

@code {
    public string imageSrc = "";
    public string Message { get; set; } = "";
    public string _RenderMessage { get; set; } = "";
    private readonly UserManager<UserModel> _userManager;
    [Parameter] public string ReciverIdForm { get; set; }
    private HubConnection? _hubConnection;
    private UserModel user;
    private UserModel Revicer;
    private List<MessageModel> MessageList;
    private List<MessageModel> MessageListToRemove = new List<MessageModel>();


    protected override async Task OnInitializedAsync()
    {
        Revicer = await _UserService.GetUserById(ReciverIdForm);
        user = await GetLoggedUser();
        MessageList = await _MessageService.GetMessages(user.Id, Revicer.Id);

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/testhub"))
            .Build();

        _hubConnection.On<string>("ReciveNotification", (message) =>
        {

            AddMessageToView(AddBreakLines(message), "reciverMessages");
            JSRuntime.InvokeVoidAsync("scrollToBottom");

        });

        await _hubConnection.StartAsync();
        UserModel _User = await _UserService.GetLoggedUser(_Context);
        await _hubConnection.InvokeAsync("JoinGroup", _User.Id);
        if(MessageList.Count == 0)
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom");
        }

    }

    private async Task AddMessageToView(string MessageContent,string ElementId)
    {
        await JSRuntime.InvokeVoidAsync("AddMessageToView", MessageContent, ElementId);
    }
    private async Task SendMessage(string MessageContent, string ReciverId)
    {

        if (!string.IsNullOrWhiteSpace(MessageContent) && MessageContent.Length < 512)
        {
            var user = await GetLoggedUser();
            _MessageService.AddMessage(MessageContent, ReciverId, user.Id);
            Message = "";
            await _hubConnection.InvokeAsync("SendMessage", MessageContent, Revicer.Id);
            AddMessageToView(AddBreakLines(MessageContent), "creatorMessages");
            await JSRuntime.InvokeVoidAsync("scrollToBottom");

        }


    }
    public string AddBreakLines(string Message)
    {
        var MessageWithBreakLines = "";
        StringBuilder outputText = new StringBuilder();
        int licznik = 0;

        foreach (char c in Message)
        {
            if (licznik >= 85)
            {
                outputText.Append("</br>");
                licznik = 0;
            }
            outputText.Append(c);
            licznik++;
        }
        MessageWithBreakLines = outputText.ToString();
        return MessageWithBreakLines;
    }
    public async Task<UserModel> GetLoggedUser()
    {
        UserModel _User = await _UserService.GetLoggedUser(_Context);
        if(_User != null)
        {
            return _User;
        }
        else
        {
            return null;
        }
    }
    public async ValueTask DisposeAsync()
    {
        if(_hubConnection != null)
        {
        await _hubConnection.DisposeAsync();
        }
    }
    private void RedirectToPage(string url)
    {
        NavigationManager.NavigateTo(url, forceLoad: true);
    }
  
}
