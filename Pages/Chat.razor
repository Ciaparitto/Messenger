@page "/chat/{ReciverIdForm}"

@inject NavigationManager Navigation
@inject HttpClient Http
@inject AppDbContext _Context;
@inject IJSRuntime JSRuntime
@inject IUserService _UserService
@inject IMessageService _MessageService

@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims;
@using System.Text;
@using System.Security.Policy
@using messager.Services.Interfaces;
@using messager.Services;
@using messager.models;
@implements IAsyncDisposable
@inject SignalRManager _SignalManager;

<PageTitle>Index</PageTitle>

<link href="css/style.css" rel="stylesheet">



ogarnij wyswietlanie wiadomosci i to ze jak odbiorca wejdzie na strone to sie ikonka zmienia w nadawcy
   
   
    @if (Reciver != null && user != null)
    {
    <div id="ReciverInfo">
        <div id="Home-button-container">
            <button class="ButtonLayOut" @onclick="@(() => RedirectToPage("/"))">Strona Glowna</button>
        </div>
       <div id="ImgAndUsername">
        <img id="UserPhoto" src="@($"/DisplayImage/{Reciver.ProfileImageId}")" />
        <h3 id="username">@Reciver.UserName</h3>
        </div>
    </div>
    }

       
<div id="messageConatiner">

   
 </div>
    <input id="inputChat"type="text" name="Message" @bind="Message" />
    <button id="sendbutton" @onclick="() => SendMessage(Message,Reciver.Id)">napisz</button>


@code {
    public string imageSrc = "";
    public string Message { get; set; } = "";
    public string _RenderMessage { get; set; } = "";
    private readonly UserManager<UserModel> _userManager;
    [Parameter] public string ReciverIdForm { get; set; }
    public HubConnection? _hubConnection;
    private UserModel user;
    private UserModel Reciver;
    private List<MessageModel> MessageList;
    private List<MessageModel> MessageListToRemove = new List<MessageModel>();


    protected override async Task OnInitializedAsync()
    {


        Reciver = await _UserService.GetUserById(ReciverIdForm);
        user = await _UserService.GetLoggedUser();
        MessageList = await _MessageService.GetMessages(user.Id, Reciver.Id);
        await ReadMessages();
        await GenerateMessages();

        _hubConnection = new HubConnectionBuilder()
           .WithUrl(Navigation.ToAbsoluteUri("/testhub"), options =>
           {
               options.Headers["UserId"] = user.Id;
           })
           .Build();
        _hubConnection.StartAsync();

        _hubConnection.On<string>("ReciveNotification", (message) =>
           {
               //AddMessageToView(AddBreakLines(message), "reciverMessages", Reciver.ProfileImageId.ToString(), "reciverImg");
               ReadAndGenerate();
               JSRuntime.InvokeVoidAsync("scrollToBottom");
             
           });

        _hubConnection.On("ReadMessages",async () =>
            {
                ReadAndGenerate();


            });

        await _hubConnection.InvokeAsync("JoinGroup", user.Id);
        await _hubConnection.InvokeAsync("ReadMessages", Reciver.Id);

        if(MessageList.Count == 0)
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom");
        }


    }
    private async Task ReadMessages()
    {
        var reciverMessages = MessageList.Where(x => x.ReciverId == Reciver.Id).ToList();
        foreach (var message in reciverMessages)
        {
            if (!message.IsRead)
            {
                message.IsRead = true;
            }
        }
    }
    private async Task GenerateMessages()
    {
        if (MessageList != null)
        {
            foreach (var message in MessageList)
            {

                if (message.CreatorId == user.Id)
                {
                    if(message.IsRead)
                    {
                        AddMessageToView(AddBreakLines(message.Content), "creatorMessages", "6", "creatorImg"); // image with id 6 have readed message icon
                    }
                    else
                    {
                        AddMessageToView(AddBreakLines(message.Content), "creatorMessages", "7", "creatorImg"); // image with id 7 have sended message icon
                    }


                }
                else
                {

                    AddMessageToView(AddBreakLines(message.Content), "reciverMessages", Reciver.ProfileImageId.ToString(), "reciverImg");
                }
                //MessageListToRemove.Add(message);
            }

        }
        
        @if (MessageListToRemove != null)
        {
            @foreach (var message in MessageListToRemove)
            {
                MessageList.Remove(message);
            }
        }

    }
    public async ValueTask DisposeAsync()
    {

        if (_hubConnection != null)
        {
            await _hubConnection.StopAsync();
            _hubConnection.DisposeAsync();
        }
    }
    private async Task AddMessageToView(string MessageContent, string MessClassName, string ProfileId,string ImgClassName )
    {
      
        await JSRuntime.InvokeVoidAsync("AddMessageToView", MessageContent, MessClassName, ProfileId, ImgClassName);
    }
    private async Task SendMessage(string MessageContent, string ReciverId)
    {

        if (!string.IsNullOrWhiteSpace(MessageContent) && MessageContent.Length < 512)
        {

            _MessageService.AddMessage(MessageContent, ReciverId, user.Id);
            Message = "";
            await _hubConnection.InvokeAsync("SendMessage", MessageContent, Reciver.Id);
            ReadAndGenerate();
           // AddMessageToView(AddBreakLines(MessageContent), "creatorMessages", "7", "creatorImg");
            await JSRuntime.InvokeVoidAsync("scrollToBottom");


            //await _hubConnection.InvokeAsync("ReadMessages", Reciver.Id);
            //await ReadAndGenerate();

        }


    }
    public async Task ReadAndGenerate()
    {
        MessageList = await _MessageService.GetMessages(user.Id, Reciver.Id);
        await GenerateMessages();
    }
    public string AddBreakLines(string Message)
    {
        var MessageWithBreakLines = "";
        StringBuilder outputText = new StringBuilder();
        int licznik = 0;

        foreach (char c in Message)
        {
            if (licznik >= 85)
            {
                outputText.Append("</br>");
                licznik = 0;
            }
            outputText.Append(c);
            licznik++;
        }
        MessageWithBreakLines = outputText.ToString();
        return MessageWithBreakLines;
    }
  
   
    private void RedirectToPage(string url)
    {
        Navigation.NavigateTo(url, forceLoad: true);
    }
  
}
