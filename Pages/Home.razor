@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@using Microsoft.AspNetCore.Identity;
@using messager.Services.Interfaces;
@using messager.models;
@using Microsoft.EntityFrameworkCore;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject UserManager<UserModel> _userManager
@inject IUserService _UserService
<link href="css/style.css" rel="stylesheet">

    <div class="pickuser">
        <h2>znajdz znajomych  </h2>
       
        <div class="input">
            <input id="inputSearch" type="text" @bind="keyWords" />
            <button id="ButtonSearch" @onclick="@(() =>  GetUsers())">szukaj</button>
        </div>
        @if (Users != null)
        {
            if (Users.Count != 0)
            {
                foreach (var user in Users)
                {

                    if (user.Id != LoggedUser.Id)
                    {
                        <br />
                        <button class="ButtonLayOut" @onclick="@(() => RedirectToPage($"chat/{user.Id}"))">@user.UserName</button>
                    }
                }
            }
            else
            {
                <p>nie znaleziono znajomych</p>
            }
        }
        
    </div>


@code{
    private string keyWords = "";
    private List<UserModel> Users;
    private UserModel LoggedUser;
    private bool IsLogged;
    protected override async Task OnInitializedAsync()
    {

        LoggedUser = await _UserService.GetLoggedUser();
        Console.WriteLine(LoggedUser.UserName);
    }
    private void RedirectToPage(string url)
    {
        NavigationManager.NavigateTo(url, forceLoad: true);
    }
    public async Task GetUsers()
    {
        
        
        var users = _userManager.Users.AsQueryable();

        if (!string.IsNullOrEmpty(keyWords))
        {
            users = users.Where(x => x.UserName.Contains(keyWords));
        }
        Users = await users.ToListAsync();
        if (Users.Contains(LoggedUser))
        {
            Users.Remove(LoggedUser);
        }
        StateHasChanged();
        

    }
}
