@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

@using Microsoft.AspNetCore.Identity;
@using messager.Services.Interfaces;
@using messager.models;
@using Microsoft.EntityFrameworkCore;
@inject AppDbContext _Context;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject UserManager<UserModel> _userManager
@inject IUserService _UserService

<link href="css/style.css" rel="stylesheet">
@if (LoggedUser != null)
{
    <div class="pickuser">
        <h2>znajdz znajomych  </h2>

        <div class="input">
            <input id="inputSearch" type="text" @bind="keyWords" />
            <button id="ButtonSearch" @onclick="@(() =>  GetUsers())">szukaj</button>
        </div>
        @if (Users != null)
        {
            if (Users.Count != 0)
            {
                foreach (var user in Users)
                {

                    if (user.Id != LoggedUser.Id)
                    {
                        <br />
                        <button class="ButtonLayOut" @onclick="@(() => RedirectToPage($"chat/{user.Id}"))">@user.UserName</button>
                    }
                }
            }
           
        }
    </div>
  

}
else
{
   <h1>loading</h1>
}
@code{
    private string keyWords = "";
    private List<UserModel> Users;
    private UserModel LoggedUser;
    private List<UserModel> UserList;
    private bool IsLogged;
    protected override async Task OnInitializedAsync()
    {

        LoggedUser = await _UserService.GetLoggedUser(_Context);
        if(LoggedUser == null)
        {
            RedirectToPage("/Account/Login");
        }
        if (LoggedUser != null)
        {
            UserList = await Http.GetFromJsonAsync<List<UserModel>>($"api/Messenger/GetUsers?creatorId={LoggedUser.Id}");
        }

    }
    private void RedirectToPage(string url)
    {
        NavigationManager.NavigateTo(url, forceLoad: true);
    }
    public async Task GetUsers()
    {
        
      

        var users = _userManager.Users.AsQueryable();

        if (!string.IsNullOrEmpty(keyWords))
        {
            users = users.Where(x => x.UserName.Contains(keyWords));
        }
        Users = await users.ToListAsync();
        if (Users.Contains(LoggedUser))
        {
            Users.Remove(LoggedUser);
        }
        StateHasChanged();
        

    }
}
