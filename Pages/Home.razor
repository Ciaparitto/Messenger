@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@implements IAsyncDisposable

@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using messager.Services
@using messager.Services.Interfaces;
@using messager.models;
@using Microsoft.EntityFrameworkCore;
@inject AppDbContext _Context;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject UserManager<UserModel> _userManager
@inject IUserService _UserService
@inject SignalRManager _SignalManager;

<link href="css/style.css" rel="stylesheet">
@if (LoggedUser != null)
{
      <div id="LastetMessages">
        <h2>Lastet messages</h2>
        @if (UserList != null && UserList.Count != 0)
        {
            @foreach (var user in UserList)
            {
                <div class="UserList-User">
                    <img id="UserPhoto" class="UserList-Photo" src="@($"/DisplayImage/{user.ProfileImageId}")" />
                    <button class="UserList-Button" @onclick="@(() =>  RedirectToPage($"chat/{user.Id}"))">@user.UserName</button>
                </div>
            }
        }
    </div>
    <div class="pickuser">
        <h1>Find friends</h1>

        <div class="input">
            <input id="inputSearch" type="text" @bind="keyWords" />
            <button id="ButtonSearch" @onclick="@(() =>  GetUsers())">Find</button>
        </div>

        @if (Users != null && Users.Count != 0)
        {
            foreach (var user in Users)
            {

                if (user.Id != LoggedUser.Id)
                {
                    <div class="UserList-User">
                        <img id="UserPhoto" class="UserList-Photo" src="@($"/DisplayImage/{user.ProfileImageId}")" />
                        <button class="UserList-Button" @onclick="@(() =>  RedirectToPage($"chat/{user.Id}"))">@user.UserName</button>
                    </div>
                }
            }
                     
        }
       
    </div>
    <div id="FrirendOnline">
        <h2>Your online friends</h2>
        @if (OnlineFriendsList != null && OnlineFriendsList.Count != 0)
        {
            @foreach (var user in OnlineFriendsList)
            {

                <div class="UserList-User">
                    <img id="UserPhoto" class="UserList-Photo" src="@($"/DisplayImage/{user.ProfileImageId}")" />
                    <button class="UserList-Button" @onclick="@(() =>  RedirectToPage($"chat/{user.Id}"))">@user.UserName</button>
                </div>
            }
        }
    </div>

}

@code{
    private string keyWords = "";
    private List<UserModel> Users;
    private UserModel LoggedUser;
    private List<UserModel> UserList = new List<UserModel>();
    private List<UserModel> OnlineFriendsList = new List<UserModel>();
    private bool IsLogged;
    private HubConnection? _hubConnection;
    private Dictionary<string, string> ConnectionsMap;
    protected override async Task OnInitializedAsync()
    {

        LoggedUser = await _UserService.GetLoggedUser();

        if(LoggedUser == null)
        {
            RedirectToPage("/Account/Login");
        }
        if (LoggedUser != null)
        {
            UserList = await Http.GetFromJsonAsync<List<UserModel>>($"api/Messenger/GetUsers?creatorId={LoggedUser.Id}");

            _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/testhub"), options =>
            {
                options.Headers["UserId"] = LoggedUser.Id;
            })
            .Build();
            await _hubConnection.StartAsync();
            GetOnlineFriends();
           
        }


    }
    private void RedirectToPage(string url)
    {
        Navigation.NavigateTo(url, forceLoad: true);
    }
    public async Task GetUsers()
    {
        var users = _userManager.Users.AsQueryable();

        if (!string.IsNullOrEmpty(keyWords))
        {
            users = users.Where(x => x.UserName.Contains(keyWords));
        }
        Users = await users.ToListAsync();
        if (Users.Contains(LoggedUser))
        {
            Users.Remove(LoggedUser);
        }
        StateHasChanged();      
    }
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    public async Task GetOnlineFriends()
    {
        while (true)
        {
            await Task.Delay(TimeSpan.FromSeconds(20));

            ConnectionsMap = _SignalManager.GetConnectionUserMap();

            foreach (var user in UserList)
            {

                if (ConnectionsMap.ContainsValue(user.Id) && !OnlineFriendsList.Contains(user))
                {
                    OnlineFriendsList.Add(user);
                }
                if (!ConnectionsMap.Values.Contains(user.Id) && OnlineFriendsList.Contains(user))
                {
                    OnlineFriendsList.Remove(user);
                }

            }


            StateHasChanged();

        }
       
    }
}
